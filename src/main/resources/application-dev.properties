spring.config.import=/config/infoant.properties
#----------------------
# Configuracion logback
#----------------------
#infoantenas.configpath=${configpath}
#logging.config=file:${infoantenas.configpath}/logback-info.xml

# Configuracion con kubernetes
#logging.config=${PATH_LOGBACK}

# Trabajar con Docker
logging.config=file:/config/logback-info.xml

#-----------------------------------
# Configuracion Motor Base de Datos.
#-----------------------------------
# Para evitar el problema de PKIX path building failed agregamos -> encrypt=true;trustServerCertificate=true
spring.datasource.url=${datasource.url}
spring.datasource.username=${datasource.username}
spring.datasource.password=${datasource.password}

#-----------------------------
# Driver SQLServer y Dialecto.
#-----------------------------
spring.jpa.show-sql=${show-sql}
spring.jpa.properties.hibernate.format_sql=${format_sql}
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
# Se comenta ya que spring boot por defecto Hibernate lo detecta de forma automatica, con esto evitamo un WARN al iniciar la aplicacion
spring.jpa.database-platform=${database-platform}


# Log por consola.
#----------------
logging.level.org.hibernate.SQL=${logging.level:INFO}
spring.jpa.hibernate.naming.physical-strategy=${hibernate.naming.physical-strategy}


#----------------------------------------------------------------------------------
# Variables obtenidas desde docker_compose.yml para trabajar en docker o kubernetes
#----------------------------------------------------------------------------------
#spring.datasource.url=${SPRING_DATASOURCE_URL}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
#spring.jpa.show-sql=${show-sql}
#spring.jpa.properties.hibernate.format_sql=${format_sql}
#spring.datasource.driver-class-name=${driver-class-name}
#spring.jpa.hibernate.naming.physical-strategy=${hibernate.naming.physical-strategy}
